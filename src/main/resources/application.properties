# The Kafka broker location
kafka.bootstrap.servers=${KAFKA_BOOTSTRAP_SERVERS:http://localhost:9092}
quarkus.http.port=${QUARKUS_HTTP_PORT:8081}
# Configuring the incoming channel (reading from Kafka)
mp.messaging.incoming.json-in.connector=smallrye-kafka
mp.messaging.incoming.json-in.topic=payload
mp.messaging.incoming.json-in.key.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer
mp.messaging.incoming.json-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer


mp.messaging.outgoing.output.connector=smallrye-kafka
mp.messaging.outgoing.output.topic=outputPayload
mp.messaging.outgoing.output.key.serializer=org.apache.kafka.common.serialization.IntegerSerializer
mp.messaging.outgoing.output.value.serializer=org.apache.kafka.common.serialization.StringSerializer

# MongoDB configuration
quarkus.mongodb.connection-string=${MONGO_CONNECTION_STRING:mongodb://localhost:27017}
quarkus.mongodb.database=${MONGO_DATABASE:test_db}

# Test config
quarkus.http.test-port=8084
quarkus.http.test-ssl-port=8447

quarkus.http.cors=true
quarkus.http.cors.origins=${QUARKUS_HTTP_CORS_ORIGINS:http://localhost:8080/realms/quarkus}
quarkus.http.cors.methods=GET,POST,PUT,DELETE,OPTIONS,HEAD
quarkus.http.cors.headers=*

# Allow credentials (optional, if your requests require cookies or authorization headers)
quarkus.http.cors.access-control-allow-credentials=true



# OIDC Configuration
quarkus.oidc.auth-server-url=${OIDC_AUTH_SERVER_URL:http://localhost:8080/realms/quarkus}
quarkus.oidc.client-id=${OIDC_CLIENT_ID:quarkus-client}
quarkus.oidc.application-type=service
quarkus.oidc.tls.verification=none

# Enable Policy Enforcement
#quarkus.keycloak.policy-enforcer.enable=true

quarkus.http.auth.proactive=false
quarkus.log.category."io.quarkus.oidc".level=DEBUG